# --- 应用基本配置 ---
# 应用名称
APP_NAME="GithubBot"
# 应用版本
APP_VERSION="0.1.0"
# 调试模式 (True/False)
DEBUG=False
# 日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)生产环境中建议设置为 "INFO" 或 "WARNING"
LOG_LEVEL="INFO"
# API 访问密钥 (可选，用于保护 API)用于保护 API 的密钥，客户端请求时需要在 Header 中加入 X-API-KEY
API_KEY=
# 允许跨域请求的源列表，用逗号分隔，例如 "http://localhost:3000,https://your-frontend.com"
CORS_ORIGINS="http://localhost:3000,http://127.0.0.1:3000"

# --- 服务端口配置 ---
# API 监听的主机地址
API_HOST="0.0.0.0"
# API 监听的端口
API_PORT=8000

# --- 数据库配置 (PostgreSQL) ---
# 注意: 如果提供了完整的 DATABASE_URL，将忽略以下分项配置
DATABASE_URL="postgresql+psycopg2://user:password@postgres:5432/repoinsight"
POSTGRES_USER="user"
POSTGRES_PASSWORD="password"
POSTGRES_DB="repoinsight"
POSTGRES_HOST="postgres"
POSTGRES_PORT=5432

# --- 消息队列配置 (Redis) ---
# 注意: 如果提供了完整的 REDIS_URL，将忽略以下分项配置
REDIS_URL="redis://redis:6379/0"
REDIS_HOST="redis"
REDIS_PORT=6379

# --- 向量数据库配置 (ChromaDB) ---
# 注意: 如果提供了完整的 CHROMA_SERVER_URL，将忽略以下分项配置
# CHROMA_SERVER_URL="http://chromadb:8000"
CHROMADB_HOST="chromadb"
CHROMADB_PORT=8000
# CHROMADB_PERSISTENT_PATH="./chroma_data"

# --- LLM 和 Embedding 模型 API Keys ---
# 请根据您使用的模型，填写对应的 API Key
OPENAI_API_KEY=
AZURE_OPENAI_API_KEY=
AZURE_OPENAI_ENDPOINT=
ANTHROPIC_API_KEY=
COHERE_API_KEY=
GOOGLE_API_KEY=
HUGGINGFACE_HUB_API_TOKEN=
MISTRAL_API_KEY=
QWEN_API_KEY=
DASHSCOPE_API_KEY=

# --- Git 配置 ---
# 用于克隆 Git 仓库的本地目录 (在容器内)
GIT_CLONE_DIR="/repo_clones"

ALLOWED_FILE_EXTENSIONS='[".py", ".js", ".jsx", ".ts", ".tsx", ".java", ".cpp", ".c", ".h", ".hpp", ".cs", ".php", ".rb", ".go", ".rs", ".swift", ".kt", ".scala", ".md", ".txt", ".rst", ".json", ".yaml", ".yml", ".toml", ".ini", ".cfg", ".sh", ".sql", ".html", ".css", ".vue", "dockerfile", "makefile", "readme", "license", "changelog"]'

EXCLUDED_DIRECTORIES='[".git", "node_modules", "dist", "build", "venv", ".venv", "target"]'

CELERY_BROKER_URL=redis://redis:6379/0